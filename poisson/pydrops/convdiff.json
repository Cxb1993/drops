{
    //=========================================================================
    //    DROPS parameter file for poissonP{1,2}
    //    simulation of poisson problem:
    //      In this concrete example we are only interested in the stationary
    //      solution, we have no convection, no reaction and a given solution.
    //=========================================================================

    //#######################################
    // Options for the iterative Solver
    //#######################################
    "Poisson":
    {
        "PcIter":           1,      //inactive (former: iterations of the preconditioner)
        "PcTol":            0.1,    //inactive (former: tolerance of the preconditioning solve)
        "Iter":             1000,    //number of iterations of the iterativ solver
        "Restart":          100,    //used for GMRES: a possible krylov-space uses only as
            // many vectors to construct the new krylov space
        "RelativeErr":      0,      //use relative tolerances (otherwise absolute) 1 = true, 0 = false
        "Tol":              1e-8,  //(relative/absolute) tolerance of iterative method
        "Method":           303,    //Methods describes Solver (first digit) + Preconditioner (last two digits)
            // First digit:
            //           1XX : Multigrid
            //           2XX : Prec. CG
            //           3XX : GMRES
            // last two digits: (Smoother + Coarse Solver[only for MG])
            //           X02 : Jacobi     + SSOR
            //           X03 : SSOR       + SSOR
            //           X04 : GS         + SSOR
            //           X05 : SGS        + SSOR
            //           X06 : SOR        + SSOR
            // BUT it exist only the following combinations:
            // 102,103,104,105,106,203,302,303
        "SmoothingSteps":   1,      //for Multigrid: number of Smoothing steps;
        "NumLvl":           -1,     //for Multigird: number of used levels (-1 = all)
        "Relax":            1,      //Relaxation factor
        "SolutionIsKnown":  0       //Is the solution known/can we measure an exact error? 1 = true, 0 = false
    },

    //#######################################
    // Functions and Coefficients that define the continuous problem:
    // du/dt - a laplace u + b grad u + q u = f
    // on Domain (s. DomainCond) + bound. cond. (s. DomainCond)
    // the coefficients are set with strings which correspond to
    // functions of a container. The given ones used here are
    // defined in poissonCoeff.cpp
    // In this concrete example we are only interested in the stationary
    // solution, we have no convection, no reaction and a given solution.
    //############################################
    "PoissonCoeff":
    {
        "Dmol":  1,
        "Solution":         "Zero",                         //Solution of poisson problem
        "Flowfield":        "Example1_Flowfield",           //Convection velocity of PDE [b]
        "Convection":       0        //Do we have convection? -> Here: no
    },
    "Stabilization":
    {
        "SUPG":             0
    },
    //############################################
    // Description of Geometry and mesh parameters
    // and Boundary conditions
    //###################################################
    "DomainCond":
    {
        "RefineSteps":      2,
            //initial refinement: how often is the mesh refined
            // -> Here: two times refinement
        "GeomType":         1,
            //specifies the used geometry:
            // 0=ReadMeshBuilder (from file)
            // 1=BrickBuilder (a cuboid)
            // 2=CavityBuilder (a cuboid cut away from a cuboid)
            // 3=LBuilder
            // 4=BBuilder
            // -> Here: Brickbuilder
        "InitialFile":      "none",
            //file prefix when reading data for initial condition
            // -> Here: no initial data is read from outside
        "MeshFile":         "1x1x1@4x4x4"
            //mesh file (created by GAMBIT or NETGEN, FLUENT/UNS format)
            // or (in case of the BrickBuilder:)
            // dimensions of a cuboid (e.g. AxBxC@DxExF) with edge
            // sizes A,B and C in x,y,z direction and a partition into
            // D/E/F cuboids in x/y/z direction (for initial mesh)
            // Note that the Brickbuilder genenrates 6 Boundary domains
            // with the order: b.dom. 1 has normal in neg. x direction
            // b.dom. 2 has normal in pos. x direction
            // b.dom. 3 has normal in neg. y direction, etc..
            // -> Here: a cube which is divived by 4 in all directions.
    },

    //###################################################
    // Time Discretization
    //################################################
    "Time":
    {
        "StepSize":       0.1,       //time step size
        "NumSteps":       10,       //number of timesteps. -> Here: 0, i.e. stationary setup
        "Scheme":         1,       //time disc. method: 1= theta scheme, 2=fractional step
        "Theta":          1       //For theta scheme: parameter theta
    },

    //#################################
    // Error estimator
    // For stationary cases poissonP1
    // is also able to estimate the
    // error and refine adaptively
    //#################################
    "Err":
    {
        "DoErrorEstimate":      0,      //Do ErrorEstimate at all? 1 = true, 0 = false
        "RelReduction":         0.1,    //relative error reduction that should be achieved
        "DoMark":               1,      //Mark Elements (and refine adaptively)? 1 = true, 0 = false
        "MinRatio":             0,      //every element which has a larger error than this fraction
                                        //times the error of the worst element is marked
        "Threshold":            0.6,    //error of marked elements should be at least this
                                        //fraction of the total estimated error
        "Meas":                 0.875,
        "NumRef":               2       //number of adaptive refinements
    }
}